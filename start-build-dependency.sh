#!/usr/bin/env bash
## env
set -ex
## Download key files from gsutil
if [[ "$1" != "true" && "$1" != "false" ]];then 
	BUILD_MANGO_SIMULATOR=false
else
	BUILD_MANGO_SIMULATOR=$1
fi
[[ ! "$2" ]]&& echo "No ENV_ARTIFACT" && exit 1
# shellcheck source=/dev/null
source utils.sh
download_file "$2" "$HOME"
sleep 5
[[ ! -f "env-artifact.sh" ]] && echo no "env-artifact.sh" downloaded && exit 2
# shellcheck source=/dev/null
source .profile
source env-artifact.sh

## preventing lock-file build fail, 
## also need to disable software upgrade in image
sudo fuser -vki -TERM /var/lib/dpkg/lock /var/lib/dpkg/lock-frontend || true
sudo dpkg --configure -a
sudo apt update
## pre-install and rust version
sudo apt-get install -y libssl-dev libudev-dev pkg-config zlib1g-dev llvm clang cmake make libprotobuf-dev protobuf-compiler
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt-get install -y nodejs
sudo npm install -g typescript
sudo npm install -g ts-node
sudo npm install -g yarn
# warning package-lock.json found. 
# Your project contains lock files generated by tools other than Yarn. 
# It is advised not to mix package managers in order to avoid resolution inconsistencies caused by unsynchronized lock files.
# To clear this warning, remove package-lock.json.
# Memo by author: use yarn instead of npm install
rm -f package-lock.json
yarn install
rustup default stable
rustup update

echo ------- stage: download mango-simulation-dos ------
cd $HOME
[[ -d "$GIT_REPO_DIR" ]]&& rm -rf $GIT_REPO_DIR
git clone $GIT_REPO
git clone $MANGO_CONFIGURE_REPO # may remove later

echo ------- stage: build or download mango-simulation ------
[[ -d "$HOME/$MANGO_SIMULATION_DIR" ]]&& rm -rf "$HOME/$MANGO_SIMULATION_DIR"
[[ -d "mango-simulation" ]]&& rm -rf mango-simulation #might have lagacy code
# clone mango_bencher and mkdir dep dir
git clone $MANGO_SIMULATION_REPO "$HOME/$MANGO_SIMULATION_DIR"
cd "$HOME/$MANGO_SIMULATION_DIR"
if  [[ "$BUILD_MANGO_SIMULATOR" == "true" ]];then
    git checkout "$MANGO_SIMULATION_BRANCH"
	cargo build --release
	cp "$HOME/$MANGO_SIMULATION_DIR/target/release/mango-simulation" $HOME
	chmod +x $HOME/mango-simulation
	upload_file $HOME/mango-simulation "$MANGO_SIMULATION_ARTIFACT"
else
	# download from bucket
	cd $HOME
	download_file $MANGO_SIMULATION_ARTIFACT $HOME
	[[ ! -f "$HOME/mango-simulation" ]] && echo no mango-simulation downloaded && exit 1
	chmod +x $HOME/mango-simulation
fi
echo ---- stage: down id, accounts and authority file in HOME ----
cd $HOME
download_file $ID_FILE
[[ ! -f "$ID_FILE" ]]&&echo no $ID_FILE file && exit 1
download_file $AUTHORITY_FILE
[[ ! -f "$AUTHORITY_FILE" ]]&&echo no $AUTHORITY_FILE file && exit 1
download_accounts=( "$ACCOUNTS" )
for acct in "${download_accounts[@]}"
do
  download_file $acct
done
echo --- stage: Start refunding clients accounts
cd "$MANGO_CONFIGURE_DIR"
for acct in "${download_accounts[@]}"
do
  ts-node refund_users.ts "${HOME}/$acct" > out.log 2>1 || true
  if [ "$?" -ne 0 ]; then
    echo --- refund failed for $acct
  fi
done
exit 0


